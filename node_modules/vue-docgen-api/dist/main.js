"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var Documentation_1 = require("./Documentation");
exports.Documentation = Documentation_1.Documentation;
var parse_1 = require("./parse");
/**
 * Parse the components at filePath and return props, public methods, events and slots
 * @param filePath absolute path of the parsed file
 * @param opts
 */
function parse(filePath, opts) {
    return parsePrimitive(function (doc, options) { return parse_1.parseFile(doc, options); }, filePath, opts);
}
exports.parse = parse;
/**
 * Parse the `source` assuming that it is located at `filePath` and return props, public methods, events and slots
 * @param filePath absolute path of the parsed file
 * @param opts
 */
function parseSource(source, filePath, opts) {
    return parsePrimitive(function (doc, options) { return parse_1.parseSource(doc, source, options); }, filePath, opts);
}
exports.parseSource = parseSource;
function isOptionsObject(opts) {
    return !!opts && !!opts.alias;
}
function parsePrimitive(createDoc, filePath, opts) {
    var doc = new Documentation_1.Documentation();
    var options = isOptionsObject(opts)
        ? __assign({}, opts, { filePath: filePath }) : { filePath: filePath, alias: opts };
    createDoc(doc, options);
    return doc.toObject();
}
