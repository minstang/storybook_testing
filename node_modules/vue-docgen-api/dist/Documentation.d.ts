export declare type BlockTag = ParamTag | Tag;
export interface ParamType {
    name: string;
    elements?: ParamType[];
}
export interface UnnamedParam {
    type?: ParamType;
    description?: string | boolean;
}
export interface Param extends UnnamedParam {
    name?: string;
}
interface RootTag {
    title: string;
}
export interface Tag extends RootTag {
    content: string | boolean;
}
export interface ParamTag extends RootTag, Param {
}
export interface DocBlockTags {
    description: string;
    tags?: Array<ParamTag | Tag>;
}
interface EventType {
    names: string[];
}
interface EventProperty {
    type: EventType;
    name?: string;
    description?: string | boolean;
}
export interface EventDescriptor extends DocBlockTags {
    type?: EventType;
    properties: EventProperty[] | undefined;
}
export interface PropDescriptor {
    type?: {
        name: string;
        func?: boolean;
    };
    description: string;
    required?: string | boolean;
    defaultValue?: {
        value: string;
        func?: boolean;
    };
    tags: {
        [title: string]: BlockTag[];
    };
}
export interface MethodDescriptor {
    name: string;
    description: string;
    returns?: UnnamedParam;
    tags?: {
        [key: string]: BlockTag[];
    };
    params?: Param[];
    modifiers: string[];
    [key: string]: any;
}
export interface SlotDescriptor {
    description?: string;
    bindings?: Record<string, any>;
    scoped?: boolean;
}
export interface ComponentDoc {
    displayName: string;
    props: {
        [propName: string]: PropDescriptor;
    } | undefined;
    methods: MethodDescriptor[];
    slots: {
        [name: string]: SlotDescriptor;
    };
    events?: {
        [name: string]: EventDescriptor;
    };
    tags: {
        [key: string]: BlockTag[];
    };
    [key: string]: any;
}
export declare class Documentation {
    private propsMap;
    private methodsMap;
    private slotsMap;
    private eventsMap;
    private dataMap;
    constructor();
    set(key: string, value: any): void;
    get(key: string): any;
    getPropDescriptor(propName: string): PropDescriptor;
    getMethodDescriptor(methodName: string): MethodDescriptor;
    getEventDescriptor(eventName: string): EventDescriptor;
    getSlotDescriptor(slotName: string): SlotDescriptor;
    toObject(): ComponentDoc;
    private getDescriptor;
    private getObjectFromDescriptor;
    private getPropsObject;
    private getMethodsObject;
    private getEventsObject;
    private getSlotsObject;
}
export {};
